mutate(term = factor(paste(term, topic, sep = "__"),
levels = rev(paste(term, topic, sep = "__")))) %>%
ggplot(aes(term, beta, fill = as.factor(topic))) +
geom_col(show.legend = FALSE) +
coord_flip() +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
labs(title = "Top 8 terms in each LDA topic",
x = NULL, y = expression(beta)) +
facet_wrap(~ topic, ncol = 4, scales = "free")
top_terms <- tidy_lda %>%
group_by(topic) %>%
top_n(8, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
group_by(topic, term) %>%
arrange(desc(beta)) %>%
ungroup() %>%
mutate(term = factor(paste(term, topic, sep = "__"),
levels = rev(paste(term, topic, sep = "__")))) %>%
ggplot(aes(term, beta, fill = as.factor(topic))) +
geom_col(show.legend = FALSE) +
coord_flip() +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
labs(title = "Top 8 terms in each LDA topic",
x = NULL, y = expression(beta)) +
facet_wrap(~ topic, ncol = 4, scales = "free")
topics.hash=c("Faith","World","Freedom","People", "Business" ,"Responsibility", "Govern", "New America", "Employment", "Politics")
ldaOut10.topics <- as.matrix(topics(ldaOut10))
#top 20 terms in each topic
ldaOut10.terms <- as.matrix(terms(ldaOut10,20))
#probabilities associated with each topic assignment
topicProbabilities <- as.data.frame(ldaOut10@gamma)
terms.beta=ldaOut10_1@beta
terms.beta=scale(terms.beta)#scale the columns
corpus.list$ldatopic=as.vector(ldaOut10.topics)
corpus.list$ldahash=topics.hash[ldaOut10.topics]
colnames(topicProbabilities)=topics.hash
corpus.list.df=cbind(corpus.list, topicProbabilities)
as.data.frame(table(corpus.list$ldahash))
colors=c(alpha(brewer.pal(9, "Set1"), 0.8),alpha(brewer.pal(9, "Set1"), 0.8)[1])
ggplot(corpus.list,aes(ldahash))+geom_bar(width = 0.5,fill=colors)+labs(x="Topics",y="Frequency")
topics.hash=c("Faith","World","Freedom","People", "Business" ,"Responsibility", "Govern", "New America", "Employment", "Politics")
ldaOut10.topics <- as.matrix(topics(ldaOut10))
#top 20 terms in each topic
ldaOut10.terms <- as.matrix(terms(ldaOut10,20))
#probabilities associated with each topic assignment
topicProbabilities <- as.data.frame(ldaOut10@gamma)
terms.beta=ldaOut10_1@beta
terms.beta=scale(terms.beta)#scale the columns
corpus.list$ldatopic=as.vector(ldaOut10.topics)
corpus.list$ldahash=topics.hash[ldaOut10.topics]
colnames(topicProbabilities)=topics.hash
corpus.list.df=cbind(corpus.list, topicProbabilities)
#as.data.frame(table(corpus.list$ldahash))
colors=c(alpha(brewer.pal(9, "Set1"), 0.8),alpha(brewer.pal(9, "Set1"), 0.8)[1])
ggplot(corpus.list,aes(ldahash))+geom_bar(width = 0.5,fill=colors)+labs(x="Topics",y="Frequency")
par(mar=c(1,1,1,1))
topic.summary=as_tibble(corpus.list.df)%>%
filter(type%in%c("inaug"))%>%
select(File, Faith:Politics)%>%
group_by(File)%>%
summarise_each(funs(mean))
#topic.summary$max.topic<-topics.hash[apply(topic.summary[,2:11],1,which.max)]
#normalization
# f1<-function(vec){
#   return(vec/sum(vec))
# }
# topic.summary[,2:11]<-apply(topic.summary[,2:11],1,f1)
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=topic.summary[,1]
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=as.character((topic.summary[,1]))
km.res=kmeans(scale(topic.summary[,-1]), iter.max=200,
5)
fviz_cluster(km.res,
stand=T, repel= TRUE,
data = topic.summary[,-1],
show.clust.cent=FALSE,labelsize = 8)
save.image("~/Desktop/[ADS]Advanced Data Science/fall2017-project1-XinLuoCU/output/Untitled.RData")
setwd("~/Desktop/[ADS]Advanced Data Science/fall2017-project1-XinLuoCU")
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("plyr")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library("lda")
library('readr')
library('gdata')
library('wordcloud')
library('tidytext')
library("ggplot2")
library("scales")
library("gridExtra")
source("~/Desktop/[ADS]Advanced Data Science/fall2017-project1-XinLuoCU/lib/plotstacked.R")
source("~/Desktop/[ADS]Advanced Data Science/fall2017-project1-XinLuoCU/lib/speechFuncs.R")
nomin_inaug_list<-sentence_list%>%
filter(Win=="Yes"|Win=="yes",type!="farewell",File%in%sel,Term==1)%>%
arrange(desc(File))
nomin_inaug_list$x<-apply(nomin_inaug_list[,c("File","type")],1,paste,collapse="-")
nomin_inaug_list$FileOrdered<-reorder(nomin_inaug_list$x,nomin_inaug_list$word.count,mean,order=T)
nomin_inaug_list<-nomin_inaug_list%>%
arrange(desc(FileOrdered))
Speech_length<-nomin_inaug_list%>%
group_by(File,type)%>%
dplyr::summarise(
words=mean(Word),
mean_words=mean(word.count,na.rm=T)
)
par(oma=c(2,2,2,2),mar=c(2,2,2,2))
ggplot(Speech_length,aes(x=File,y=words,fill=factor(type)))+
geom_bar(stat="identity",position="dodge",width = 0.5)+
coord_flip() +
xlab("President")+ylab("Number of Words")
rowTotals
corpus.list=corpus.list[rowTotals>0, ]
print(head(short_sentences1,10))
print(as.matrix(head(short_sentences1,10)))
short_sentences<-sentence_list%>%
filter(word.count<=8,nchar(sentences)>3,Win=="yes")
short_sentences$sentences<-tolower(short_sentences$sentences)
short_sentences<-short_sentences%>%
filter(!sentences%in%c("the president.","audience.",'boo-o-o!','no!','no-o-o!',"four more years!","4 more years!","audience members.","go al, go.","go, al, go.","viva bush!","vice president gore.","chairman, mr.","speaker, mr.","chief justice, mr.","flip-flop!"))
short_sentences1<-short_sentences%>%
group_by(sentences)%>%
summarise(
times=length(word.count),
max_times=max(table(President)),
fav_president=paste(names(which.max(table(President))),collapse=";")
#,presidents=paste(names(table(President)),table(President),collapse="; ",sep="-")
)%>%
arrange(desc(times))
#short_sentences1<-short_sentences1[,c(1,2,4)]
print(as.matrix(head(short_sentences1,10)))
print(head(short_sentences1,10))
join_list2<-merge(Bush2,Obama1,by="term",all.x=F,all.y = F)
join_list2[,2]<-join_list2[,2]/sum(join_list2[,2],na.rm=T)
join_list2[,3]<-join_list2[,3]/sum(join_list2[,3],na.rm=T)
colnames(join_list2)=c("Term","GeorgeWBush_2","BarackObama_1")
p2=ggplot(join_list2, aes( GeorgeWBush_2,BarackObama_1)) +
geom_jitter(alpha=0.1, size = 2.5, width = 0.25, height = 0.25) +
geom_text(aes(label = Term), check_overlap = TRUE, vjust = 1.5,cex=3) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
geom_abline(color = "red")
packages.used = c('tm', 'wordcloud', 'RColorBrewer','dplyr', 'tidytext','skmeans','shiny','readxl')
packages.needed = setdiff(packages.used, installed.packages()[,1])
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies=TRUE, repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(skmeans)
library(shiny)
library(readxl)
print(R.version)
folder.path = '../data/InauguralSpeeches/'
filenames = list.files(path=folder.path, pattern='*.txt')
speeches = substr(filenames, 1, nchar(filenames)-4)
ff.all <- Corpus(DirSource(folder.path))
#install.packages('plotly')
library('plotly')
#install.packages('quantmod')
library('quantmod')
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
}
#plot_K_line(df)
#ddply(matched_dfs1,matched_dfs1$stkcode,plot_K_line)
data<-read.csv("total_data.csv")
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
}
plot_K_line(df[1:10,])
plot_K_line(data[1:10,])
View(data)
View(data)
plot_K_line(data[1:30,])
data3y<-data[data$dcdate>=20141233,]
x<-Sys.time()
df_total_features1<-make_6_features_f(data3y)
target_ind<-read.csv("~/Desktop/Intern/test_data/Similar K line graph/target_ind.csv")[,2]
target<-data[data$stkcode==600889,]
target<-target[order(target$dcdate),]
View(target)
plot_K_line(target[1:30,])
text(x=p,y=1:30,cex=0.8,col=col.use[2:11])
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
text(x=p,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
target$sign<-rep(0,30)
target<-target[1:30,]
target$sign<-rep(0,30)
View(target)
target$sign[sample(1:30,2)]=1
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice,text=~sign)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice,text=~sign)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
#text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
target$sign<-NA
target$sign[sample(1:30,2)]="11111"
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice,text=~sign)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
#text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
a <- list(
x = target$dcdate,
y = target$highprice,
text = rownames(m),
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 7,
ax = 20,
ay = -40
)
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice) %>%
add_markers() %>%
layout(annotations = a)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
#text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
a <- list(
x = target$dcdate,
y = target$highprice,
text =target$sign,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 7,
ax = 20,
ay = -40
)
plot_K_line<-function(df){
#Date<-as.Date(as.character(df$dcdate),"%Y%m%d")
#df<-df[1]
Date<-paste(data=substr(df$dcdate,1,4),substr(df$dcdate,5,6),substr(df$dcdate,7,8),sep="-")
a <- list(
x = target$dcdate,
y = target$highprice,
text =target$sign,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 7,
ax = 20,
ay = -40
)
p<-plot_ly(df,x = ~Date, type="candlestick",
open = ~openprice, close = ~lastprice,
high = ~highprice, low = ~lowprice) %>%
add_markers() %>%
layout(annotations = a)
layout(p,title = paste("K line graph of stock",df$stkcode[1]))
#text(x=1:30,y=1:30,cex=0.8,col=col.use[2:11])
}
plot_K_line(target[1:30,])
library('lawstat')
install.packages("lawstat")
install.packages("shiny")
install.packages("lawstat")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
fluidPage(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})')),
tabPanel('ui.R',
code('
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
'))
)
)
library('lawstat')
data3<-zuni
data3<-data(zuni)
data3<-data('zuni')
data3<-zuni
library('lawstat')
data3<-zuni
library('lawstat')
install.packages('lawstat')
library('lawstat')
install.packages("VGAM")
library(vcd)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
data<-data.frame(as.table(MSPatients))
N<-data%>%
group_by(New.Orleans.Neurologist,Patients)%>%
summarise(
Freq=sum(Freq),
Nero="New_Orleans"
)
colnames(N)<-c('rate','Patient','freq','neurologists_name')
N<-data.frame(N)
W<-data%>%
group_by(Winnipeg.Neurologist,Patients)%>%
summarise(
Freq=sum(Freq),
Nero="Winnipeg"
)
colnames(W)<-c('rate','Patient','freq','neurologists_name')
W<-data.frame(W)
data1<-rbind(N,W)
ggplot(data1,aes(rate,freq,fill=neurologists_name))+
geom_bar(stat="identity",position="dodge",width = 0.5)
ggplot(data1,aes(rate,freq,fill=neurologists_name))+
geom_bar(stat="identity",position="dodge",width = 0.5)+
facet_grid(~Patient)
library("AER")
data2<-GSOEP9402
library("AER")
data2<-GSOEP9402
library("AER")
data2<-GSOEP9402
data2<-data('GSOEP9402')
data2<-GSOEP9402
library('lawstat')
install.packages('lawstat')
library('lawstat')
library('VGAM')
install.packages('VGAM')
install.packages(VGAM)
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
shiny::runApp('Desktop/making_map')
runApp('Desktop/making_map')
runApp('Desktop/making_map')
span
runApp('Desktop/making_map')
df<-tidysat%>%
filter(Name=="1")
runApp('Desktop/making_map')
library("dplyr")
runApp('Desktop/making_map')
runApp('Desktop/making_map')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
plot_ly()%>%layout(title="no data")
plot_ly(df)%>%layout(title="no data")
ax <- list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
plot_ly(df)%>%layout(title="no data",xaxis = ax,yaxis =ax)
plot_ly(df)%>%add_text(text="haha")%>%layout(title="no data",xaxis = ax,yaxis =ax)
plot_ly(df)%>%add_text(text="haha",x=1,y=1)%>%layout(title="no data",xaxis = ax,yaxis =ax)
runApp()
plot_ly()%>%layout(title="no data",xaxis = ax,yaxis =ax)
runApp()
runApp()
runApp()
df
nrow(df)
runApp()
View(teacher_expr)
runApp()
runApp()
teacher_df<-teacher_expr%>%filter(School.Name=="Brooklyn Prospect Charter School")
teacher_df
teacher_df[,2]
runApp()
runApp()
df
View(tidysat)
filter(Name=="47 The American Sign Language and English Secondar")
df=tidysat%>%filter(Name=="47 The American Sign Language and English Secondar")
df
df$Score[1]
is.na(df$Score[1])
plot_ly()%>%layout(title="no data",xaxis = ax,yaxis =ax)
plot_ly(df)%>%layout(title="no data",xaxis = ax,yaxis =ax)
all(is.na(df$Score))
runApp()
sat_plot<-function(school.name){
df<-tidysat%>%
filter(Name==school.name)
m <- list(
l = 15,
r = 0,
b = 15,
t = 0
)
ax <- list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
if(is.na(df$Score[1])){
plot_ly(df)%>%layout(title="no data",xaxis = ax,yaxis =ax)
}
p=plot_ly(y =~Score,x=~Sub,data=df,type = "bar",name="The School")%>%
add_trace(y =~Score,x=~Sub,data=sat_city,type = "bar",name="City Level",textposition = 'auto')%>%
layout(xaxis = list(title = ''),yaxis =ax,
barmode = 'group',legend=list(x=0,y=500),margin=m)
}
runApp()
icon("user=o")
icon("user-o")
runApp()
runApp()
shiny::runApp()
